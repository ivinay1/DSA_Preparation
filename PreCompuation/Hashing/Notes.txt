HASHING
Hashing is a technique that is used to uniquely identify a specific object from a group of similar objects.

for Example,
In libraries, each book is assigned a unique number that can be used to determine information about the book, such as its exact position in the library or the users it has been issued to etc

Assume that you have an object and you want to assign a key to it to make searching easy.
To store the key/value pair

you can use a simple array like a data structure where keys(integers) can be used directly as an index to store values

   1        2       3          4
   Prince   Sumit   Pradeep    Anant

for example:-
    Book ID:-  BOOKEW12    REF7201Q    UIQ793QAZ     WEQ13B
    Where the keys are large and cannot be used directly as an index, you should use hashing.

In Hashing,
          large keys are converted into small keys by using hash functions.
          The values are then stored in a data structure called hash table
          The idea of hashing is to distribute entries(key/value pairs) uniformly across an array

Each element is assigned a key(converted key)
By using that key you can access the element in O(1) time
Using the key, the algorithm (hash function) computes an index that suggests where an entry can be found or inserted.

Let's Suppose
            "abcdef", "bcdefa", "cdefab", "defabc"

KEY          abcdef            bcedefa            cdefab            defabc
VALUE        Book of Science   Book of English    Book of SST       Book of Maths 

HASH table
Index
0
1
2                           abcdef             bcdefa              cdefab            defabc
-                         Book of Science   Book of English    Book of SST       Book of Maths
-                            
11     defabc                  11                14               23                  28
12                         Book of Maths     Book of SST       Book of English       Book of Science       
13
14     cdefab
-
-
-
23     bcdefa
-
-
28     abcdef


How to CREATE Hashing

            KEY ----------->  HASHING     ---------->  HASH TABLE CREATED  
                              FUNCTION                        Or
                              (some logic)              Got the Index in a array

How to ACCESS Hashing

            KEY -----------> HASHING     ------------>  Got the index
                             FUNCTION
                             (some logic)


HASHING
  Key                    Value
  Cuba                   Havana
  England                London
  France                 Paris 
  Spain                  Madrid
  Switzerland            Berne

  Logic of HASHING:---  simply count the number of characters


Position                Keys array        Values array
(hash = key length)
1                       
2
3                                           
4                       Cuba                Havana
5                       Spain               Madrid
6                       France              Paris 
7                       England             London
8
9
10
11                     Switzerland          Berne

NOTE: If you have an array having both positive and non-negative numbers, and we have to find a number in O(1) time then using HASHING.
Take a 2D array and in 0th row take account of positive numbers and in 1th row take account of negative numbers.

HASH[MAX+1][2]
                                           MAX
                <--------------------------------------------------------->
          HASH   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
              1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0


HASHING
      Search ------------>O(1)
      Insert ------------>O(1)
      Delete ------------>O(1)

      Key --> value
      Phone Number Example  --> If key is present then, overwrite the Value

HASHING NOT valid
   1.) Finding absent Value
   2.) Sorted data

   HASHING Application
        1.) Dictionaries
        2.) Cryptography
        3.) Caches
        4.) Symbol Table in compilers/Interpretors
        5.) Routers

    Imagine a situation where you have 1000 Keys with values from 0 to 999 
           how would you implemented in O(1) Time Complexity

    Example situation
           insert(10)
           insert(20)
           insert(101)
           insert(30)
           insert(44)
           insert(57)

    Direct Access Table NOT works fine:-
                     Beacause it can't handle large values
            Phone numbers are key
            Finding, point numbers
            Keys are string
      
      HOW HASH FUNCTION WORK?
      1.) Should always map a large key to some small key
      2.) Should generate values from 0 to m-1
      3.) Should be fast, O(1) for integers, and O(len) for string of length "len"
      4.) Should uniformly distribute large key into Hash Table slots

      Example of Hash function

      1.) H( large_key)= large_key%m                        ideally, choose prime number chance of collision is less
                                                            Chance of collision is less
                                                            bad value of m --> power of 2,10
      2.) For strings, weighted Sum
               str[]  = "Abcd"

          str[0]*x^0 + str[1]*x^1+ str[2]*x^2+ str[3]*x^3 

          Universally Distributed the keys in Table

    Collision handling
    If we know keys in Advance then, we can perfect Hashing 
                                          lets suppose you have Hash Table of size 10
                                          You have to insert 10 Phone numbers in hash table
                                          You can choose A function, Like last Digit of Phone number as index 
                                          Then collision is bound to happen                                                  

      Methods of collision handling
      1.) Chaining
                   Hash(key) = key%7;
                   key = {50,21,58,17,15,49,56,22,23,25};

                   0   21 -> 49 -> 56
                   1   50 -> 15 -> 21
                   2   58 -> 23
                   3
                   4
                   5
                   6
                   Hash Table( Array of Linked List)

            Performance of Chaining
                 M = number of slots in Hash table
                 N = number of keys to be inserted

                        Load factor a = n/m;
                              We want to be load factor to be small
                        If number of slots will be high, then there is more chance of collision

            Expected chain length = we don't know
                            Worst case: every key is inserted in same chain

            Expected chain length(Ideally) = a 

            We can Implement Chaining by LinkedList, vector etc

(V.V.V IMPORTANT)
KAHA PAR YA KONSE SCENARIO MEIN KI YAHA PAR HASHING LAGEGI
Hashing is a versatile technique that can be applied to various types of problems in data structures and algorithms (DSA). Here are some common scenarios where you might recognize the need for hashing:

Duplicate Detection: When you need to detect and remove duplicates from a collection of elements, hashing can be very efficient. You can hash each element and store the hashes in a hash set or hash table, allowing you to quickly check for duplicates.

Frequency Counting: If you need to count the frequency of elements in an array or a string, hashing can help. You can use a hash map to store the counts of each element, with the elements themselves as keys and their frequencies as values.

Searching: Hashing can be used to speed up searching algorithms. For example, in a problem where you need to find pairs of elements that sum up to a certain value, you can hash the elements and then quickly check if the complement of each element exists in the hash table.

Caching and Memoization: Hashing can be used to implement caching and memoization techniques, where you store the results of expensive function calls or intermediate computations to avoid redundant calculations.

String Manipulation: Hashing is often used in string manipulation problems, such as substring search, anagrams detection, or palindrome checking.

Graph Algorithms: Hashing can be used in graph algorithms for tasks like detecting cycles, finding connected components, or implementing graph representations such as adjacency lists or adjacency matrices.

Set Operations: Hashing is useful for set operations like union, intersection, and difference. By hashing the elements of each set, you can perform these operations efficiently.